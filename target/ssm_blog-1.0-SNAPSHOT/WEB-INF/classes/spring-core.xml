<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:solr="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath*:*.properties"/>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClass" value="${jdbc.driver}"/>
        <!--        &lt;!&ndash;连接池中保留的最小连接数。&ndash;&gt;-->
        <!--        <property name="minPoolSize" value="5"/>-->
        <!--        &lt;!&ndash;连接池中保留的最大连接数。Default: 15 &ndash;&gt;-->
        <!--        <property name="maxPoolSize" value="200"/>-->
        <!--        &lt;!&ndash;初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 &ndash;&gt;-->
        <!--        <property name="initialPoolSize" value="10"/>-->
        <!--        &lt;!&ndash;最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 &ndash;&gt;-->
        <!--        <property name="maxIdleTime">-->
        <!--            <value>30</value>-->
        <!--        </property>-->
        <!--        &lt;!&ndash;当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 &ndash;&gt;-->
        <!--        <property name="acquireIncrement" value="15"/>-->
    </bean>

    <!-- controller   -->
    <context:component-scan base-package="com.javabull.ssm.blog">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!--  整合mybatis  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!--  配置扫描器  -->
    <!--   扫描所有dao接口的实现，加入ioc容器 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.javabull.ssm.blog.dao"/>
    </bean>

    <!--  事务控制  -->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <!--    此处改为SIMPLE,否则无法获取主键    -->
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>

    <!-- redis服务器中心 -->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="poolConfig" ref="jedisPoolConfig"/>
        <property name="port" value="${redis.port}"/>
        <property name="hostName" value="${redis.host}"/>
        <property name="database" value="2"/>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>


<!--    &lt;!&ndash; solr配置   &ndash;&gt;-->
<!--    &lt;!&ndash;指定solr地址&ndash;&gt;-->
<!--    <solr:solr-server id="solrServer" url="http://127.0.0.1:8983/solr/ssm_blog" />-->

<!--    &lt;!&ndash; solr模板，使用solr模板可对索引库进行CRUD的操作 &ndash;&gt;-->
<!--    <bean id="solrTemplate" class="org.springframework.data.solr.core.SolrTemplate">-->
<!--        <constructor-arg ref="solrServer" />-->
<!--    </bean>-->

    <!--  开启基于注解的事务，使用xml进行配置（必要主要的都是基于xml）  -->
    <aop:config>
        <aop:pointcut id="txPoint" expression="execution(* com.javabull.ssm.blog.service..*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

    <!--  配置事务增强，事务如何切入  -->
    <tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager">
        <tx:attributes>
            <!--     所有方法都是事务方法       -->
            <tx:method name="*" rollback-for="Exception"/>
            <!--    以get开始的所有方法        -->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
</beans>